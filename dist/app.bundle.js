!function(Q){var I={};function C(g){if(I[g])return I[g].exports;var F=I[g]={i:g,l:!1,exports:{}};return Q[g].call(F.exports,F,F.exports,C),F.l=!0,F.exports}C.m=Q,C.c=I,C.d=function(Q,I,g){C.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:g})},C.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},C.t=function(Q,I){if(1&I&&(Q=C(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var g=Object.create(null);if(C.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var F in Q)C.d(g,F,function(I){return Q[I]}.bind(null,F));return g},C.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return C.d(I,"a",I),I},C.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},C.p="",C(C.s=0)}([function(Q,I,C){Q.exports=C(3)},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/toDoDB.js\nvar SERVER_URL = 'http://localhost:3005/';\nvar request, toDoDB_db;\n\nfunction getObjectStore() {\n  return toDoDB_db.transaction(['ToDoItems'], 'readwrite').objectStore('ToDoItems');\n}\n\nfunction getAll() {\n  return fetch(SERVER_URL).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction postAll(obj) {\n  return fetch(SERVER_URL, {\n    'method': 'POST',\n    'Content-Type': 'application/json',\n    'body': JSON.stringify(obj)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (items) {\n    navigator.serviceWorker.controller.postMessage('updateScreens');\n    return items;\n  });\n}\n\nvar DB = {\n  // getAll, postAll,\n  start: function start() {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      request = indexedDB.open('toDo', 1);\n\n      request.onsuccess = function (event) {\n        toDoDB_db = request.result;\n        resolve(_this);\n      };\n\n      request.onupgradeneeded = function (event) {\n        toDoDB_db = event.target.result;\n        toDoDB_db.createObjectStore('ToDoItems', {\n          keyPath: 'id'\n        });\n      };\n    });\n  },\n\n  get request() {\n    return request;\n  },\n\n  get db() {\n    return toDoDB_db;\n  },\n\n  selectedItem: {},\n  find: function find(id) {\n    var _this2 = this;\n\n    return new Promise(function (resolve) {\n      var request = getObjectStore().get(+id);\n\n      request.onsuccess = function (event) {\n        _this2.selectedItem = request.result;\n        resolve(request.result);\n      };\n    });\n  },\n  findAll: function findAll() {\n    var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'server';\n    return new Promise(function (resolve) {\n      var request = getObjectStore().getAll();\n\n      request.onsuccess = function (event) {\n        resolve(request.result);\n      };\n    });\n  },\n  insert: function insert(item) {\n    var _this3 = this;\n\n    return new Promise(function (resolve) {\n      item.id = new Date().getTime();\n      item.isChecked = false;\n      var request = getObjectStore().add(item);\n\n      request.onsuccess = function (event) {\n        resolve(_this3.findAll()); // navigator.serviceWorker.ready.then(function(registration){\n        //     return registration.sync.register('newItem');\n        // })\n      };\n    });\n  },\n  update: function update(item) {\n    var _this4 = this;\n\n    return new Promise(function (resolve) {\n      var updatedItem = Object.assign(_this4.selectedItem, item);\n      var request = getObjectStore().put(updatedItem);\n\n      request.onsuccess = function (event) {\n        resolve(_this4.findAll());\n      };\n    });\n  },\n  remove: function remove(id) {\n    var _this5 = this;\n\n    return new Promise(function (resolve) {\n      var request = getObjectStore().delete(id);\n\n      request.onsuccess = function (event) {\n        resolve(_this5.findAll());\n      };\n    });\n  },\n  checkAll: function checkAll() {\n    var _this6 = this;\n\n    var isChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var isAllUpdated = false,\n        isUpdated = false;\n    return new Promise(function (resolve) {\n      getObjectStore().openCursor().onsuccess = function (event) {\n        var cursor = event.target.result;\n\n        if (cursor) {\n          isUpdated = false;\n          var newData = cursor.value;\n          newData.isChecked = isChecked;\n          var request = cursor.update(newData);\n\n          request.onsuccess = function () {\n            isUpdated = true;\n\n            if (isAllUpdated && isUpdated) {\n              resolve(_this6.findAll());\n            }\n          };\n\n          cursor.continue();\n        } else {\n          isAllUpdated = true;\n\n          if (isAllUpdated && isUpdated) {\n            resolve(_this6.findAll());\n          }\n        }\n      };\n    });\n  },\n  clearAll: function clearAll() {\n    var _this7 = this;\n\n    var isAllRemoved = false,\n        isRemoved = false;\n    return new Promise(function (resolve) {\n      getObjectStore().openCursor().onsuccess = function (event) {\n        var cursor = event.target.result;\n\n        if (cursor) {\n          isRemoved = false;\n\n          if (cursor.value.isChecked) {\n            var request = cursor.delete();\n\n            request.onsuccess = function () {\n              isRemoved = true;\n\n              if (isAllRemoved && isRemoved) {\n                resolve(_this7.findAll());\n              }\n            };\n          } else {\n            isRemoved = true;\n          }\n\n          cursor.continue();\n        } else {\n          isAllRemoved = true;\n\n          if (isAllRemoved && isRemoved) {\n            resolve(_this7.findAll());\n          }\n        }\n      };\n    });\n  }\n};\n// CONCATENATED MODULE: ./js/toDoTemplate.js\nvar Template = {\n  toDoList: function toDoList(itemList) {\n    var listElement = document.querySelector('.todo-list');\n    var template = '';\n    itemList.forEach(function (item) {\n      var backgroundImage = !item.image ? '' : \"style=\\\"background-image: url('\".concat(item.image, \"');\\\"\");\n      var checkbox = item.isChecked ? 'check_box' : 'check_box_outline_blank';\n      template += \"<li class=\\\"todo-list-item\\\">\\n\\t\\t\\t                <div class=\\\"demo-card-wide mdl-card mdl-shadow--2dp\\\" \".concat(backgroundImage, \" >\\n\\t\\t\\t                    <div class=\\\"card-content-container\\\" >  \\n\\t\\t\\t                      <div class=\\\"mdl-card__title\\\">\\n\\t\\t\\t                        <h2 class=\\\"mdl-card__title-text\\\">\").concat(item.title, \"</h2>\\n\\t\\t\\t                      </div>\\n\\t\\t\\t                      <div class=\\\"mdl-card__supporting-text\\\">\\n\\t\\t\\t                        \").concat(item.description, \"\\n\\t\\t\\t                      </div>\\n\\t\\t\\t                      <div class=\\\"mdl-card__menu\\\">\\n\\t\\t\\t                        <button class=\\\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\\\" data-item=\\\"\").concat(item.id, \"\\\" data-action=\\\"open\\\" >\\n\\t\\t\\t                          <i class=\\\"material-icons\\\">edit</i>\\n\\t\\t\\t                        </button>\\n\\t\\t\\t                        <button class=\\\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\\\" data-item=\\\"\").concat(item.id, \"\\\" data-action=\\\"check\\\" >\\n\\t\\t\\t                          <i class=\\\"material-icons\\\">\").concat(checkbox, \"</i>\\n\\t\\t\\t                        </button>\\n\\t\\t\\t                      </div>\\n\\t\\t\\t                    </div>\\n\\t\\t\\t                </div>\\n\\t\\t\\t            </li>\");\n    });\n    listElement.innerHTML = template;\n    return template;\n  }\n};\n// CONCATENATED MODULE: ./js/camera.js\nvar videoElement,\n    stream,\n    videoDevices = [],\n    selectedDeviceIndex = 0;\nnavigator.mediaDevices.enumerateDevices().then(function (devices) {\n  devices.forEach(function (device) {\n    if (device.kind === 'videoinput') {\n      videoDevices.push(device.deviceId);\n    }\n  });\n});\nvar Camera = {\n  start: function start() {\n    this.stop();\n\n    if (videoDevices.length) {\n      videoElement = document.getElementById('camera-tag');\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 230,\n          height: 200,\n          deviceIdId: {\n            exact: videoDevices[selectedDeviceIndex]\n          }\n        }\n      }).then(function (localMediaStream) {\n        stream = localMediaStream;\n        videoElement.src = window.URL.createObjectURL(stream);\n        videoElement.play();\n      });\n    }\n  },\n  stop: function stop() {\n    if (stream) {\n      videoElement = '';\n      stream.getVideoTracks()[0].stop();\n      stream = null;\n    }\n  },\n  shoot: function shoot() {\n    if (stream) {\n      var canvas = document.createElement('canvas'),\n          ctx = canvas.getContext('2d');\n      canvas.width = 230;\n      canvas.height = 200;\n      ctx.drawImage(videoElement, 0, 0, 230, 200);\n      var image = canvas.toDataURL('image/webp');\n      return image;\n    }\n\n    return false;\n  },\n  changeSource: function changeSource() {\n    if (stream && videoDevices.length > 1) {\n      selectedDeviceIndex++;\n\n      if (selectedDeviceIndex === videoDevices.length) {\n        selectedDeviceIndex = 0;\n      }\n\n      this.start();\n    }\n  }\n};\n// CONCATENATED MODULE: ./js/toDoController.js\n\n\n\nvar Controller = {\n  start: function start() {\n    var _this = this;\n\n    document.addEventListener('click', function (event) {\n      if (event.target.classList.contains('mdl-button__ripple-container') || event.target.classList.contains('material-icons')) {\n        var button = event.target.parentElement;\n\n        switch (button.dataset['action']) {\n          case 'open':\n            _this.Modal.item.open(button.dataset['item']);\n\n            break;\n\n          case 'close':\n            _this.Modal.item.close();\n\n            break;\n\n          case 'check':\n            _this.Modal.item.check(button.dataset['item']);\n\n            break;\n\n          case 'save':\n            _this.Modal.item.save();\n\n            break;\n\n          case 'startCamera':\n            _this.Modal.camera.open();\n\n            break;\n\n          case 'stopCamera':\n            _this.Modal.camera.close();\n\n            break;\n\n          case 'shoot':\n            _this.Modal.camera.shoot();\n\n            break;\n\n          case 'changeSource':\n            _this.Modal.camera.changeSource();\n\n            break;\n        }\n      } else if (event.target.classList.contains('mdl-navigation__link')) {\n        var button = event.target;\n\n        switch (button.dataset['action']) {\n          case 'newItem':\n            _this.Menu.newItem();\n\n            break;\n\n          case 'checkAll':\n            _this.Menu.checkAll();\n\n            break;\n\n          case 'uncheckAll':\n            _this.Menu.uncheckAll();\n\n            break;\n\n          case 'clearAll':\n            _this.Menu.clearAll();\n\n            break;\n        }\n      }\n    });\n  },\n  Modal: {\n    item: {\n      modal: document.querySelector('#item-dialog'),\n      selectedItemId: null,\n      open: function open(itemId) {\n        var dialog = this.modal;\n        dialog.querySelector('.close').addEventListener('click', this.close);\n        dialog.showModal();\n        this.setItem(itemId);\n        this.selectedItemId = itemId;\n      },\n      close: function close() {\n        var that = Controller.Modal.item;\n        var dialog = that.modal;\n        dialog.querySelector('.close').removeEventListener('click', that.close);\n        dialog.hasAttribute('open') && dialog.close();\n      },\n      setItem: function setItem(itemId) {\n        var form = this.getElements();\n\n        if (!itemId) {\n          form.img.src = '';\n          form.title.value = '';\n          form.description.value = '';\n        } else {\n          DB.find(itemId).then(function (item) {\n            form.img.src = item.image || '';\n            form.title.value = item.title;\n            form.description.value = item.description;\n          });\n        }\n      },\n      check: function check(itemId) {\n        var _this2 = this;\n\n        this.selectedItemId = itemId;\n        DB.find(itemId).then(function (item) {\n          item.isChecked = !item.isChecked;\n\n          _this2.save(item);\n        });\n      },\n      save: function save(item) {\n        var _this3 = this;\n\n        var itemValues = item || this.getItemValues();\n        (this.selectedItemId ? DB.update(itemValues) : DB.insert(itemValues)).then(function (itemsList) {\n          Template.toDoList(itemsList);\n\n          _this3.close();\n        });\n      },\n      getElements: function getElements() {\n        var dialog = this.modal;\n        var img = dialog.querySelector('#item-dialog-picture'),\n            title = dialog.querySelector('#title'),\n            description = dialog.querySelector('#description');\n        return {\n          img: img,\n          title: title,\n          description: description\n        };\n      },\n      getItemValues: function getItemValues() {\n        var form = this.getElements();\n        return {\n          title: form.title.value,\n          description: form.description.value,\n          image: form.img.getAttribute('src')\n        };\n      }\n    },\n    camera: {\n      modal: document.querySelector('#camera-dialog'),\n      open: function open() {\n        var dialog = this.modal;\n        dialog.querySelector('.close').addEventListener('click', this.close);\n        dialog.showModal();\n        Camera.start();\n      },\n      close: function close() {\n        var that = Controller.Modal.camera;\n        var dialog = that.modal;\n        dialog.querySelector('.close').removeEventListener('click', that.close);\n        dialog.hasAttribute('open') && dialog.close();\n        Camera.stop();\n      },\n      shoot: function shoot() {\n        var image = Camera.shoot();\n\n        if (image) {\n          Controller.Modal.item.getElements().img.src = image;\n          this.close();\n        }\n      },\n      changeSource: function changeSource() {\n        Camera.changeSource();\n      }\n    }\n  },\n  Menu: {\n    newItem: function newItem() {\n      Controller.Modal.item.open();\n      this.closeMenu();\n    },\n    checkAll: function checkAll() {\n      DB.checkAll(true).then(function (itemsList) {\n        Template.toDoList(itemsList);\n      });\n    },\n    uncheckAll: function uncheckAll() {\n      DB.checkAll(false).then(function (itemsList) {\n        Template.toDoList(itemsList);\n      });\n    },\n    clearAll: function clearAll() {\n      DB.clearAll().then(function (itemsList) {\n        Template.toDoList(itemsList);\n      });\n      this.closeMenu();\n    },\n    closeMenu: function closeMenu() {\n      document.querySelector('.mdl-layout__obfuscator').click();\n    }\n  }\n};\n// CONCATENATED MODULE: ./js/toDoNotification.js\nvar PUBLIC_KEY = \"BBZejeSiAno7068TAxztOSUED83OOUO9N1BZIVjYeJ79sXbPvKUUA1sm0D2MzO4c4iii0ettoAkOjHgXwpvaa1w\";\n\nfunction urlBase64ToUint8Array(base64String) {\n  var padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nvar ToDoNotification = {\n  subscribeUserToNotification: function subscribeUserToNotification() {\n    Notification.requestPermission().then(function (permission) {\n      if (permission === 'granted') {\n        var subscribeOptions = {\n          userVisibleOnly: true,\n          applicationServerKey: urlBase64ToUint8Array(PUBLIC_KEY)\n        };\n        navigator.serviceWorker.ready.then(function (registration) {\n          return registration.pushManager.subscribe(subscribeOptions);\n        }).then(function (subscription) {\n          return fetch('http://localhost:3006', {\n            'method': 'POST',\n            'Content-Type': 'application/json',\n            'body': JSON.stringify(subscription)\n          });\n        });\n      }\n    });\n  }\n};\n// CONCATENATED MODULE: ./js/app.js\n\n\n\n\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('../dist/service_worker.js').then(function (registration) {\n    console.log('Service Worker registered with scope: ', registration.scope);\n    ToDoNotification.subscribeUserToNotification();\n  }).catch(function (err) {\n    console.log('Service Worker registration failed: ', err);\n  });\n}\n\nDB.start().then(function (db) {\n  db.findAll().then(function (itemsList) {\n    return Template.toDoList(itemsList);\n  });\n});\nController.start();\nnavigator.serviceWorker.addEventListener('message', function (event) {\n  if (event.data === 'updateScreens') {\n    DB.findAll().then(function (itemsList) {\n      return Template.toDoList(itemsList);\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")}]);